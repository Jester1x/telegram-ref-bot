import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
REF_LINK = "https://www.tbank.ru/baf/7Yzkluz5kaS"
SUPPORT_USERNAME = "@otututu"
ADMIN_ID = 955084910  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® USER_ID –≤ Telegram

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('applications.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            full_name TEXT,
            screenshot_file_id TEXT,
            contact_info TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
def add_application(user_id, username, full_name, screenshot_file_id, contact_info):
    conn = sqlite3.connect('applications.db')
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO applications (user_id, username, full_name, screenshot_file_id, contact_info)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, full_name, screenshot_file_id, contact_info))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
def get_applications():
    conn = sqlite3.connect('applications.db')
    cur = conn.cursor()
    cur.execute('SELECT * FROM applications ORDER BY created_at DESC')
    applications = cur.fetchall()
    conn.close()
    return applications

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
def update_application_status(app_id, status):
    conn = sqlite3.connect('applications.db')
    cur = conn.cursor()
    cur.execute('UPDATE applications SET status = ? WHERE id = ?', (status, app_id))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def handle_screenshot(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = update.message
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        'user_id': user.id,
        'username': user.username,
        'full_name': user.full_name,
        'screenshot_file_id': None,
        'contact_info': None
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ)
    if message.photo:
        user_info['screenshot_file_id'] = message.photo[-1].file_id
        await message.reply_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã)
    elif message.text and not message.text.startswith('/'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('applications.db')
        cur = conn.cursor()
        cur.execute('SELECT * FROM applications WHERE user_id = ? AND status = "pending"', (user.id,))
        existing_app = cur.fetchone()
        conn.close()
        
        if existing_app:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            user_info['contact_info'] = message.text
            add_application(user.id, user.username, user.full_name, existing_app[4], message.text)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_text = f"""
üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.full_name} (@{user.username})
üÜî *ID:* {user.id}
üìû *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {message.text}
üìÖ *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

*–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:* /view_applications
            """
            
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=admin_text,
                    parse_mode='Markdown'
                )
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await context.bot.forward_message(
                    chat_id=ADMIN_ID,
                    from_chat_id=message.chat_id,
                    message_id=existing_app[0]
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            
            await message.reply_text("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –°–ø–∞—Å–∏–±–æ!")
        else:
            await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
async def view_applications(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    applications = get_applications()
    
    if not applications:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:*\n\n"
    for app in applications:
        status_emoji = "‚è≥" if app[6] == 'pending' else "‚úÖ" if app[6] == 'approved' else "‚ùå"
        text += f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{app[0]}*\n"
        text += f"üë§ {app[3]} (@{app[2]})\n"
        text += f"üìû {app[5]}\n"
        text += f"üìÖ {app[7]}\n"
        text += f"üÜî User ID: {app[1]}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {app[6]}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async def approve_application(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: /approve <id>")
        return
    
    app_id = context.args[0]
    update_application_status(app_id, 'approved')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('applications.db')
    cur = conn.cursor()
    cur.execute('SELECT user_id, contact_info FROM applications WHERE id = ?', (app_id,))
    app = cur.fetchone()
    conn.close()
    
    if app:
        try:
            await context.bot.send_message(
                chat_id=app[0],
                text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (start, show_terms, get_link, instruction, back_to_start) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

def main() -> None:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("view_applications", view_applications))
        application.add_handler(CommandHandler("approve", approve_application))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(show_terms, pattern='show_terms'))
        application.add_handler(CallbackQueryHandler(get_link, pattern='get_link'))
        application.add_handler(CallbackQueryHandler(instruction, pattern='instruction'))
        application.add_handler(CallbackQueryHandler(back_to_start, pattern='back_to_start'))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ç–µ–∫—Å—Ç)
        application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_screenshot))
        
        logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        application.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()
