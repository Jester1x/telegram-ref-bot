import os
import logging
import psycopg2
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("BOT_TOKEN")
REF_LINK = "https://www.tbank.ru/baf/7Yzkluz5kaS"  # –ó–ê–ú–ï–ù–ò–¢–ï
SUPPORT_USERNAME = "@moneytreerefbot"    # –ó–ê–ú–ï–ù–ò–¢–ï
ADMIN_ID = 955084910                  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® USER_ID

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
DATABASE_URL = os.environ.get('DATABASE_URL')

if not DATABASE_URL:
    logging.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ Railway")
    DATABASE_URL = None

if not TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• PostgreSQL =====

def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    if not DATABASE_URL:
        return None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        return conn
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    if not conn:
        logging.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–µ")
        return
    
    try:
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS applications (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                full_name TEXT,
                screenshot_file_id TEXT,
                contact_info TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, status)  -- –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            )
        ''')
        conn.commit()
        conn.close()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def add_application(user_id, username, full_name, screenshot_file_id, contact_info):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    conn = get_connection()
    if not conn:
        logging.info(f"üìù –ó–∞—è–≤–∫–∞ –æ—Ç {username} (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)")
        return True
    
    try:
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute('SELECT id FROM applications WHERE user_id = %s AND status = %s', (user_id, 'pending'))
        existing_app = cur.fetchone()
        
        if existing_app:
            logging.info(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ #{existing_app[0]}")
            conn.close()
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        cur.execute('''
            INSERT INTO applications (user_id, username, full_name, screenshot_file_id, contact_info)
            VALUES (%s, %s, %s, %s, %s)
        ''', (user_id, username, full_name, screenshot_file_id, contact_info))
        conn.commit()
        conn.close()
        logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        return True
    except psycopg2.IntegrityError:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        conn.rollback()
        conn.close()
        logging.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–π –∑–∞—è–≤–∫–∏ –æ—Ç {username}")
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        conn.close()
        return False

def get_pending_applications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    conn = get_connection()
    if not conn:
        return []
    
    try:
        cur = conn.cursor()
        cur.execute('SELECT * FROM applications WHERE status = %s ORDER BY created_at DESC', ('pending',))
        applications = cur.fetchall()
        conn.close()
        return applications
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []

def get_all_applications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    conn = get_connection()
    if not conn:
        return []
    
    try:
        cur = conn.cursor()
        cur.execute('SELECT * FROM applications ORDER BY created_at DESC')
        applications = cur.fetchall()
        conn.close()
        return applications
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {e}")
        return []

def update_application_status(app_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    conn = get_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        cur.execute('UPDATE applications SET status = %s WHERE id = %s', (status, app_id))
        conn.commit()
        conn.close()
        logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{app_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def get_application_by_user_id(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ user_id"""
    conn = get_connection()
    if not conn:
        return None
    
    try:
        cur = conn.cursor()
        cur.execute('SELECT * FROM applications WHERE user_id = %s AND status = %s', (user_id, 'pending'))
        application = cur.fetchone()
        conn.close()
        return application
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏: {e}")
        return None

def get_application_by_id(app_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    conn = get_connection()
    if not conn:
        return None
    
    try:
        cur = conn.cursor()
        cur.execute('SELECT * FROM applications WHERE id = %s', (app_id,))
        application = cur.fetchone()
        conn.close()
        return application
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ –ø–æ ID: {e}")
        return None

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—É—á–∏—Ç—å 1000 —Ä—É–±–ª–µ–π –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã T-Bank Black.

üí∞ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 500‚ÇΩ –æ—Ç –±–∞–Ω–∫–∞ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ü–ª—é—Å 500‚ÇΩ –æ—Ç –º–µ–Ω—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ò—Ç–æ–≥–æ: 1000‚ÇΩ –Ω–∞ —Ä—É–∫–∏!

üìã *–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:*
    """
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data='show_terms')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_terms(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    terms_text = """
üîí *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ú—ã –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ú—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –í–∞—à username, —Ñ–∞–º–∏–ª–∏—è –∏–º—è –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è *–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ* –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—à–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤

*‚úÖ –£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞*

*–ù–∞–∂–∏–º–∞—è ¬´–Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ:*

1. *–î–µ–π—Å—Ç–≤—É–µ—Ç–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ* ‚Äî –º—ã –Ω–∏ –∫ —á–µ–º—É –Ω–µ –ø—Ä–∏–Ω—É–∂–¥–∞–µ–º
2. *–û–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∞–∫—Ü–∏–∏ –±–∞–Ω–∫–∞* –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ (https://acdn.t-static.ru/static/documents/promo-baf-common.pdf)
3. *–ü–æ–Ω–∏–º–∞–µ—Ç–µ —á—Ç–æ:* 
   - –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1000‚ÇΩ (500‚ÇΩ –æ—Ç –±–∞–Ω–∫–∞ + 500‚ÇΩ –æ—Ç –º–µ–Ω—è)
   - –Ø –ø–æ–ª—É—á–∞—é 1000‚ÇΩ –æ—Ç –±–∞–Ω–∫–∞ –∑–∞ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
4. *–û—Å–æ–∑–Ω–∞–µ—Ç–µ,* —á—Ç–æ —ç—Ç–æ —á–∞—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ñ–µ—Ä—Ç–∞ –±–∞–Ω–∫–∞
5. *–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å* –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É username –∏ –≤–∞—à–∏—Ö —Ä–µ–∫–≤–µ–∑–∏—Ç–æ–≤ –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç
6. *–ó–Ω–∞–µ—Ç–µ,* —á—Ç–æ –≤—ã–ø–ª–∞—Ç–∞ –æ—Ç –º–µ–Ω—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –∞–∫—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.
7. *–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:* 
   - –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (username, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –§–ò) –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö
   - –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç –∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤

üí° *–≠—Ç–æ –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ü–∏–∏ –±–∞–Ω–∫–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é –≤—ã–≥–æ–¥—É.* 
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏", callback_data='get_link')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(terms_text, reply_markup=reply_markup, parse_mode='Markdown')

async def get_link(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    instruction_text = f"""
üéâ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:

{REF_LINK}

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. *–û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É* –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. *–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É* –æ—Ç 500‚ÇΩ (–ù–ï: –ñ–ö–•, —Å–≤—è–∑—å, –ø–µ—Ä–µ–≤–æ–¥—ã)
3. *–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç* –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç
4. *–ü–æ–ª—É—á–∏—Ç–µ 500‚ÇΩ* –æ—Ç –º–µ–Ω—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤) –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏üì∏ 
    """
    
    keyboard = [
        [InlineKeyboardButton("üì± –Ø –æ—Ñ–æ—Ä–º–∏–ª –∫–∞—Ä—Ç—É –∏ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É", callback_data='instruction')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='show_terms')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instruction_text, reply_markup=reply_markup, parse_mode='Markdown')

async def instruction(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    instruction_text = """
*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 500‚ÇΩ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞:*
1. *–°–∫—Ä–∏–Ω—à–æ—Ç* –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–æ–∫—É–ø–∫—É
2. *–ò–Ω–∏—Ü–∏–∞–ª—ã* (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è) –∏ *–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã* –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞)

üïê *–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π* –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.

‚ùì *–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ:*
- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
- –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ (–æ—Ç 500‚ÇΩ)
- –ù–µ –≤–∏–¥–Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–∞–∂—å—Ç–µ CVV, –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)
    """
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='get_link')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instruction_text, reply_markup=reply_markup, parse_mode='Markdown')

async def back_to_start(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—É—á–∏—Ç—å 1000 —Ä—É–±–ª–µ–π –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã T-Bank Black.

üí∞ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 500‚ÇΩ –æ—Ç –±–∞–Ω–∫–∞ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ü–ª—é—Å 500‚ÇΩ –æ—Ç –º–µ–Ω—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ò—Ç–æ–≥–æ: 1000‚ÇΩ –Ω–∞ —Ä—É–∫–∏!

üìã *–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:*
    """
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data='show_terms')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ö–†–ò–ù–®–û–¢–û–í –ò –î–ê–ù–ù–´–• =====

async def handle_screenshot(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = update.message
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ)
    if message.photo:
        screenshot_file_id = message.photo[-1].file_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
        existing_app = get_application_by_user_id(user.id)
        if existing_app:
            await message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = add_application(user.id, user.username, user.full_name, screenshot_file_id, None)
        
        if success:
            await message.reply_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).")
        else:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã)
    elif message.text and not message.text.startswith('/'):
        contact_info = message.text
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_app = get_application_by_user_id(user.id)
        
        if not existing_app:
            await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        conn = get_connection()
        if conn:
            try:
                cur = conn.cursor()
                cur.execute('UPDATE applications SET contact_info = %s WHERE id = %s', 
                           (contact_info, existing_app[0]))
                conn.commit()
                conn.close()
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {e}")
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_text = f"""
üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{existing_app[0]}*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.full_name} (@{user.username})
üÜî *ID:* {user.id}
üìû *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {contact_info}
üìÖ *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

*–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:* https://t.me/{user.username}
        """
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f'view_screenshot_{existing_app[0]}'),
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{existing_app[0]}')
                ]])
            )
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        await message.reply_text("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –°–ø–∞—Å–∏–±–æ!")

# ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =====

async def view_applications(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    applications = get_pending_applications()
    
    if not applications:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    for app in applications:
        app_id, user_id, username, full_name, screenshot_file_id, contact_info, status, created_at = app
        
        text = f"""
üìã *–ó–∞—è–≤–∫–∞ #{app_id}*
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {full_name} (@{username})
üÜî *User ID:* {user_id}
üìû *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {contact_info if contact_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üìä *–°—Ç–∞—Ç—É—Å:* {status}
üìÖ *–î–∞—Ç–∞:* {created_at.strftime('%Y-%m-%d %H:%M')}
        """
        
        keyboard = []
        
        if screenshot_file_id:
            keyboard.append([InlineKeyboardButton("üì∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f'view_screenshot_{app_id}')])
        
        keyboard.extend([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{app_id}'),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{app_id}')]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def view_screenshot(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: /screenshot <id>")
        return
    
    app_id = context.args[0]
    
    app = get_application_by_id(app_id)
    if not app:
        await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    file_id, username, full_name = app[4], app[2], app[3]
    
    if not file_id:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await context.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=file_id,
        caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—è–≤–∫–∏ #{app_id}\nüë§ {full_name} (@{username})"
    )

async def view_all_with_screenshots(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    applications = get_all_applications()
    
    if not applications:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    for app in applications:
        app_id, user_id, username, full_name, screenshot_file_id, contact_info, status, created_at = app
        
        if not screenshot_file_id:
            continue
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        info_text = f"""
üìã *–ó–∞—è–≤–∫–∞ #{app_id}*
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {full_name} (@{username})
üÜî *User ID:* {user_id}
üìû *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {contact_info if contact_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üìä *–°—Ç–∞—Ç—É—Å:* {status}
üìÖ *–î–∞—Ç–∞:* {created_at.strftime('%Y-%m-%d %H:%M')}
        """
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=info_text,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=screenshot_file_id,
            caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—è–≤–∫–∏ #{app_id}"
        )

async def approve_application(update: Update, context: CallbackContext) -> None:
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: /approve <id>")
        return
    
    app_id = context.args[0]
    success = update_application_status(app_id, 'approved')
    
    if not success:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app = get_application_by_id(app_id)
    if app:
        user_id = app[1]
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")

async def reject_application(update: Update, context: CallbackContext) -> None:
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: /reject <id>")
        return
    
    app_id = context.args[0]
    success = update_application_status(app_id, 'rejected')
    
    if not success:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")
        return
    
    await update.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE –ö–ù–û–ü–û–ö =====

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith('view_screenshot_'):
        app_id = data.split('_')[2]
        
        app = get_application_by_id(app_id)
        if not app or not app[4]:
            await query.edit_message_text("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        file_id, username, full_name = app[4], app[2], app[3]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—è–≤–∫–∏ #{app_id}\nüë§ {full_name} (@{username})"
        )
    
    elif data.startswith('approve_'):
        app_id = data.split('_')[1]
        success = update_application_status(app_id, 'approved')
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            app = get_application_by_id(app_id)
            if app:
                user_id = app[1]
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π."
                    )
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    
    elif data.startswith('reject_'):
        app_id = data.split('_')[1]
        success = update_application_status(app_id, 'rejected')
        
        if success:
            await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====

def main() -> None:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        init_db()
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("view_applications", view_applications))
        application.add_handler(CommandHandler("screenshot", view_screenshot))
        application.add_handler(CommandHandler("all_screenshots", view_all_with_screenshots))
        application.add_handler(CommandHandler("approve", approve_application))
        application.add_handler(CommandHandler("reject", reject_application))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(show_terms, pattern='show_terms'))
        application.add_handler(CallbackQueryHandler(get_link, pattern='get_link'))
        application.add_handler(CallbackQueryHandler(instruction, pattern='instruction'))
        application.add_handler(CallbackQueryHandler(back_to_start, pattern='back_to_start'))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ç–µ–∫—Å—Ç)
        application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_screenshot))
        
        logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        application.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()
