import os
import logging
import psycopg2
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("BOT_TOKEN")
REF_LINK = "https://www.tbank.ru/baf/7Yzkluz5kaS"  # –ó–ê–ú–ï–ù–ò–¢–ï
SUPPORT_USERNAME = "@otututu"    # –ó–ê–ú–ï–ù–ò–¢–ï
ADMIN_ID = 955084910                  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® USER_ID

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
DATABASE_URL = os.environ.get('DATABASE_URL')

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• PostgreSQL =====

def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            full_name TEXT,
            screenshot_file_id TEXT,
            contact_info TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
    logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def add_application(user_id, username, full_name, screenshot_file_id, contact_info):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO applications (user_id, username, full_name, screenshot_file_id, contact_info)
        VALUES (%s, %s, %s, %s, %s)
    ''', (user_id, username, full_name, screenshot_file_id, contact_info))
    conn.commit()
    conn.close()
    logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

def get_pending_applications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM applications WHERE status = %s ORDER BY created_at DESC', ('pending',))
    applications = cur.fetchall()
    conn.close()
    return applications

def get_all_applications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM applications ORDER BY created_at DESC')
    applications = cur.fetchall()
    conn.close()
    return applications

def update_application_status(app_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('UPDATE applications SET status = %s WHERE id = %s', (status, app_id))
    conn.commit()
    conn.close()
    logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{app_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")

def get_application_by_user_id(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ user_id"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM applications WHERE user_id = %s AND status = %s', (user_id, 'pending'))
    application = cur.fetchone()
    conn.close()
    return application

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—É—á–∏—Ç—å 1000 —Ä—É–±–ª–µ–π –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã T-Bank Black.

üí∞ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 500‚ÇΩ –æ—Ç –±–∞–Ω–∫–∞ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ü–ª—é—Å 500‚ÇΩ –æ—Ç –º–µ–Ω—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ò—Ç–æ–≥–æ: 1000‚ÇΩ –Ω–∞ —Ä—É–∫–∏!

üìã *–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:*
    """
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data='show_terms')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_terms(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    terms_text = """
*‚úÖ –£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*

*–ù–∞–∂–∏–º–∞—è ¬´–Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ:*

üîí *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ú—ã –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ú—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –í–∞—à username –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—à–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤

üìã *–£—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:*
1. –í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, –±–µ–∑ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è
2. –í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∞–∫—Ü–∏–∏ –±–∞–Ω–∫–∞
3. –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å—Ö–µ–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π (1000‚ÇΩ –≤–∞–º, 2500‚ÇΩ –º–Ω–µ)
4. –í—ã –æ—Å–æ–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ —á–∞—Å—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, –∞ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞
5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ—Ç –±–∞–Ω–∫–∞

üí° *–ß–µ—Å—Ç–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é –≤—ã–≥–æ–¥—É –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ü–∏–∏ –±–∞–Ω–∫–∞.*
    """
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏", callback_data='get_link')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(terms_text, reply_markup=reply_markup, parse_mode='Markdown')

async def get_link(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    instruction_text = f"""
üéâ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:

{REF_LINK}

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. *–û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É* –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. *–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É* –æ—Ç 500‚ÇΩ (–ù–ï: –ñ–ö–•, —Å–≤—è–∑—å, –ø–µ—Ä–µ–≤–æ–¥—ã)
3. *–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç* –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç
4. *–ü–æ–ª—É—á–∏—Ç–µ 500‚ÇΩ* –æ—Ç –º–µ–Ω—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ!
    """
    
    keyboard = [
        [InlineKeyboardButton("üì± –Ø –æ—Ñ–æ—Ä–º–∏–ª –∫–∞—Ä—Ç—É –∏ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É", callback_data='instruction')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='show_terms')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instruction_text, reply_markup=reply_markup, parse_mode='Markdown')

async def instruction(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    instruction_text = """
üì∏ *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 500‚ÇΩ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞:*
1. *–°–∫—Ä–∏–Ω—à–æ—Ç* –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –ø–æ–∫—É–ø–∫—É
2. *–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã* –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞)

üïê *–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤* –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.

‚ùì *–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ:*
- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
- –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ (–æ—Ç 500‚ÇΩ)
- –ù–µ –≤–∏–¥–Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–∞–∂—å—Ç–µ CVV, –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)
    """
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='get_link')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instruction_text, reply_markup=reply_markup, parse_mode='Markdown')

async def back_to_start(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—É—á–∏—Ç—å 1000 —Ä—É–±–ª–µ–π –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã T-Bank Black.

üí∞ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 500‚ÇΩ –æ—Ç –±–∞–Ω–∫–∞ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ü–ª—é—Å 500‚ÇΩ –æ—Ç –º–µ–Ω—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ò—Ç–æ–≥–æ: 1000‚ÇΩ –Ω–∞ —Ä—É–∫–∏!

üìã *–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:*
    """
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data='show_terms')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{SUPPORT_USERNAME[1:]}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def handle_screenshot(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = update.message
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ)
    if message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        screenshot_file_id = message.photo[-1].file_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_app = get_application_by_user_id(user.id)
        
        if existing_app:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–µ
            conn = get_connection()
            cur = conn.cursor()
            cur.execute('UPDATE applications SET screenshot_file_id = %s WHERE id = %s', 
                       (screenshot_file_id, existing_app[0]))
            conn.commit()
            conn.close()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            add_application(user.id, user.username, user.full_name, screenshot_file_id, None)
        
        await message.reply_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã)
    elif message.text and not message.text.startswith('/'):
        contact_info = message.text
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_app = get_application_by_user_id(user.id)
        
        if existing_app and existing_app[4]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            conn = get_connection()
            cur = conn.cursor()
            cur.execute('UPDATE applications SET contact_info = %s WHERE id = %s', 
                       (contact_info, existing_app[0]))
            conn.commit()
            conn.close()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_text = f"""
üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.full_name} (@{user.username})
üÜî *ID:* {user.id}
üìû *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {contact_info}
üìÖ *–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

*–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:* /view_applications
            """
            
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=admin_text,
                    parse_mode='Markdown'
                )
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=existing_app[4],
                    caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç @{user.username}"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            
            await message.reply_text("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –°–ø–∞—Å–∏–±–æ!")
        else:
            await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
async def view_applications(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    applications = get_pending_applications()
    
    if not applications:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:*\n\n"
    for app in applications:
        status_emoji = "‚è≥" if app[6] == 'pending' else "‚úÖ" if app[6] == 'approved' else "‚ùå"
        text += f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{app[0]}*\n"
        text += f"üë§ {app[3]} (@{app[2]})\n"
        text += f"üìû {app[5]}\n"
        text += f"üìÖ {app[7]}\n"
        text += f"üÜî User ID: {app[1]}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {app[6]}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async def approve_application(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: /approve <id>")
        return
    
    app_id = context.args[0]
    update_application_status(app_id, 'approved')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_connection()
    cur = conn.cursor()
    cur.execute('SELECT user_id, contact_info FROM applications WHERE id = %s', (app_id,))
    app = cur.fetchone()
    conn.close()
    
    if app:
        try:
            await context.bot.send_message(
                chat_id=app[0],
                text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")

def main() -> None:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("view_applications", view_applications))
        application.add_handler(CommandHandler("approve", approve_application))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(show_terms, pattern='show_terms'))
        application.add_handler(CallbackQueryHandler(get_link, pattern='get_link'))
        application.add_handler(CallbackQueryHandler(instruction, pattern='instruction'))
        application.add_handler(CallbackQueryHandler(back_to_start, pattern='back_to_start'))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ç–µ–∫—Å—Ç)
        application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_screenshot))
        
        logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        application.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
async def view_screenshot(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: /screenshot <id>")
        return
    
    app_id = context.args[0]
    
    conn = get_connection()
    if not conn:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        cur = conn.cursor()
        cur.execute('SELECT screenshot_file_id, username, full_name FROM applications WHERE id = %s', (app_id,))
        result = cur.fetchone()
        conn.close()
        
        if not result:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        file_id, username, full_name = result
        
        if not file_id:
            await update.message.reply_text("‚ùå –í —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –Ω–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—è–≤–∫–∏ #{app_id}\nüë§ {full_name} (@{username})"
        )
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
async def view_all_with_screenshots(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    conn = get_connection()
    if not conn:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        cur = conn.cursor()
        cur.execute('''
            SELECT id, user_id, username, full_name, screenshot_file_id, contact_info, status, created_at 
            FROM applications 
            WHERE screenshot_file_id IS NOT NULL 
            ORDER BY created_at DESC
        ''')
        applications = cur.fetchall()
        conn.close()
        
        if not applications:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.")
            return
        
        for app in applications:
            app_id, user_id, username, full_name, screenshot_file_id, contact_info, status, created_at = app
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            info_text = f"""
üìã *–ó–∞—è–≤–∫–∞ #{app_id}*
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {full_name} (@{username})
üÜî *User ID:* {user_id}
üìû *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* {contact_info if contact_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üìä *–°—Ç–∞—Ç—É—Å:* {status}
üìÖ *–î–∞—Ç–∞:* {created_at.strftime('%Y-%m-%d %H:%M')}
            """
            
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=info_text,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=screenshot_file_id,
                caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—è–≤–∫–∏ #{app_id}"
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            import time
            time.sleep(1)
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")
